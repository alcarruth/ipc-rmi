// Generated by CoffeeScript 2.4.1
(function() {
  //!/bin/env/ coffee

  // ws_rmi_client

  // works both in browser and in node
  var WS_RMI_Client, WS_RMI_Connection, WebSocket;

  WebSocket = (typeof window !== "undefined" && window !== null ? window.WebSocket : void 0) || require('ws');

  ({WS_RMI_Connection} = require('./app'));

  WS_RMI_Client = class WS_RMI_Client {
    // Connnection should be a sub-class of WS_RMI_Connection in order to
    // create and register desired WS_RMI_Objects at construction.

    constructor(options, objects, Connection) {
      var host, path, port, protocol;
      //--------------------------------------------------------------------
      // connect() and disconnect() methods

      this.connect = this.connect.bind(this);
      this.disconnect = this.disconnect.bind(this);
      this.options = options;
      this.objects = objects;
      this.log_level = this.options.log_level || 2;
      this.log = this.options.log || console.log;
      ({host, port, path, protocol} = this.options);
      this.url = `${protocol}://${host}:${port}/${path}`;
      this.Connection = Connection || WS_RMI_Connection;
      this.id = `WS_RMI_Client-${(Math.random().toString().slice(2))}`;
    }

    connect(url) {
      return new Promise((resolve, reject) => {
        var connection, error, msg;
        try {
          if (url) {
            this.url = url;
          }
          // Note: This is screwed up !!!
          // new WebSocket(@url) connects automatically but ws.onOpen
          // cannot be set until AFTER the ws object is constructed!
          // So the 'open' event can be emitted BEFORE the handler is set!
          // See note below ...

          this.ws = new WebSocket(this.url);
          this.log("ws_rmi_client: id:", this.id);
          this.log("ws connectiing ...");
          // Note: @ws exists but is not necessarily ready yet.
          // This issue is addressed in the WS_RMI_Connection.send_message()
          // method (q.v.)

          connection = new this.Connection(this, this.ws, this.options);
          return resolve(connection);
        } catch (error1) {
          error = error1;
          this.log(error);
          msg = "\nWS_RMI_Client: connect failed.";
          msg += ` url: ${this.url}`;
          throw new Error(msg);
        }
      });
    }

    disconnect() {
      if (this.log_level > 0) {
        this.log("disconnecting: id: ", this.id);
      }
      return this.ws.close();
    }

  };

  exports.WS_RMI_Client = WS_RMI_Client;

}).call(this);
