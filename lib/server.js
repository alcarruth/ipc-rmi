// Generated by CoffeeScript 2.4.1
(function() {
  //!/bin/env/ coffee

  //  ws_rmi_server

  var WSS_RMI_Server, WS_RMI_Connection, WS_RMI_Server, WS_RMI_Server_Common, WebSocket, http, https;

  WebSocket = require('ws');

  http = require('http');

  https = require('https');

  ({WS_RMI_Connection} = require('./app'));

  // WS_RMI_Server_Common contains code common to both
  // WS_RMI_Server and WSS_RMI_Server defined below

  WS_RMI_Server_Common = class WS_RMI_Server_Common {
    // Connection should extend WS_RMI_Connection in
    // order to add desired WS_RMI_Objects at construction.

    constructor(server, options1, objects1) {
      // Start the server.
      this.start = this.start.bind(this);
      // Stop the server.
      this.stop = this.stop.bind(this);
      this.server = server;
      this.options = options1;
      this.objects = objects1;
      this.log_level = this.options.log_level || 2;
      this.log = this.options.log || console.log;
      this.id = `WS_RMI_Server-${(Math.random().toString().slice(2))}`;
      this.connections = [];
      ({host: this.host, port: this.port, protocol: this.protocol} = this.options);
      this.url = `${this.protocol}://${this.host}:${this.port}`;
      this.wss = new WebSocket.Server({
        server: this.server
      });
      this.wss.on('connection', (ws) => {
        var conn, error, msg;
        try {
          this.log(`trying new connection: ${ws}`);
          conn = new WS_RMI_Connection(this, ws, this.log_level);
          this.connections.push(conn);
          return this.log(`connection added: ${conn.id}`);
        } catch (error1) {
          error = error1;
          msg = "\nWS_RMI_Server_Common: ";
          msg += "\nError in connection event handler";
          return new Error(msg);
        }
      });
    }

    start() {
      var error;
      try {
        this.server.listen(this.port, this.host);
        return this.log(`server listening at url: ${this.url}`);
      } catch (error1) {
        error = error1;
        return this.log(error);
      }
    }

    stop() {
      this.server.close();
      return this.log("server stopped.");
    }

  };

  // WS_RMI_Server is the insecure version and can be run without root
  // access since it does not require access to the SSL credentials

  WS_RMI_Server = class WS_RMI_Server extends WS_RMI_Server_Common {
    constructor(options, objects) {
      var webserver;
      webserver = http.createServer(null);
      super(webserver, options, objects);
      this.protocol = 'ws';
    }

  };

  // WSS_RMI_Server is the secure version and requires
  // access to SSL credentials for the site.

  WSS_RMI_Server = class WSS_RMI_Server extends WS_RMI_Server_Common {
    constructor(credentials, options, objects) {
      var webserver;
      webserver = https.createServer(null, credentials);
      super(webserver, options, objects);
      this.protocol = 'wss';
    }

  };

  exports.WS_RMI_Server = WS_RMI_Server;

  exports.WSS_RMI_Server = WSS_RMI_Server;

}).call(this);
